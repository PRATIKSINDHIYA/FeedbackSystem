{
  "version": 3,
  "sources": ["../../../../Pictures/new/project/netlify/functions/submit-feedback.ts", "../../../../Pictures/new/project/node_modules/uuid/dist/esm/stringify.js", "../../../../Pictures/new/project/node_modules/uuid/dist/esm/rng.js", "../../../../Pictures/new/project/node_modules/uuid/dist/esm/native.js", "../../../../Pictures/new/project/node_modules/uuid/dist/esm/v4.js"],
  "sourceRoot": "C:/Users/Prateek/AppData/Local/Temp/tmp-27296-NFk2idj2MJZr",
  "sourcesContent": ["import { Handler } from '@netlify/functions';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport os from 'os';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface Feedback {\r\n  id: string;\r\n  full_name: string;\r\n  email: string;\r\n  message: string;\r\n  created_at: string;\r\n}\r\n\r\nconst handler: Handler = async (event) => {\r\n  // Only allow POST requests\r\n  if (event.httpMethod !== 'POST') {\r\n    return {\r\n      statusCode: 405,\r\n      body: JSON.stringify({ error: 'Method not allowed' })\r\n    };\r\n  }\r\n\r\n  try {\r\n    // Parse request body\r\n    const body = JSON.parse(event.body || '{}');\r\n    const { full_name, email, message } = body;\r\n\r\n    // Validate required fields\r\n    if (!full_name || !email || !message) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ error: 'Missing required fields' })\r\n      };\r\n    }\r\n\r\n    // Validate email format\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ error: 'Invalid email format' })\r\n      };\r\n    }\r\n\r\n    // Create new feedback object\r\n    const newFeedback: Feedback = {\r\n      id: uuidv4(),\r\n      full_name,\r\n      email,\r\n      message,\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    // Ensure data directory exists\r\n    const dataDir = path.join(os.homedir(), 'feedback-data');\r\n    if (!fs.existsSync(dataDir)) {\r\n      fs.mkdirSync(dataDir, { recursive: true });\r\n    }\r\n\r\n    // Read existing feedbacks\r\n    const feedbackFile = path.join(dataDir, 'feedbacks.json');\r\n    let feedbacks: Feedback[] = [];\r\n    if (fs.existsSync(feedbackFile)) {\r\n      const data = fs.readFileSync(feedbackFile, 'utf8');\r\n      feedbacks = JSON.parse(data);\r\n    }\r\n\r\n    // Add new feedback\r\n    feedbacks.push(newFeedback);\r\n\r\n    // Write updated feedbacks to file\r\n    fs.writeFileSync(feedbackFile, JSON.stringify(feedbacks, null, 2));\r\n\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(newFeedback)\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in submit-feedback function:', error);\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({ error: 'Failed to submit feedback' })\r\n    };\r\n  }\r\n};\r\n\r\nexport { handler }; ", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n", "import { randomUUID } from 'crypto';\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAe;AACf,kBAAiB;AACjB,gBAAe;;;ACFf,IAAM,YAAY,CAAC;AACnB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC1B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AACpD;AACO,SAAS,gBAAgB,KAAK,SAAS,GAAG;AAC7C,UAAQ,UAAU,IAAI,SAAS,CAAC,CAAC,IAC7B,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,UAAU,IAAI,SAAS,CAAC,CAAC,IACzB,MACA,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,IAC1B,UAAU,IAAI,SAAS,EAAE,CAAC,GAAG,YAAY;AACjD;;;AC1BA,oBAA+B;AAC/B,IAAM,YAAY,IAAI,WAAW,GAAG;AACpC,IAAI,UAAU,UAAU;AACT,SAAR,MAAuB;AAC1B,MAAI,UAAU,UAAU,SAAS,IAAI;AACjC,sCAAe,SAAS;AACxB,cAAU;AAAA,EACd;AACA,SAAO,UAAU,MAAM,SAAU,WAAW,EAAG;AACnD;;;ACTA,IAAAA,iBAA2B;AAC3B,IAAO,iBAAQ,EAAE,sCAAW;;;ACE5B,SAAS,GAAG,SAAS,KAAK,QAAQ;AAC9B,MAAI,eAAO,cAAc,CAAC,OAAO,CAAC,SAAS;AACvC,WAAO,eAAO,WAAW;AAAA,EAC7B;AACA,YAAU,WAAW,CAAC;AACtB,QAAM,OAAO,QAAQ,UAAU,QAAQ,MAAM,KAAK,IAAI;AACtD,MAAI,KAAK,SAAS,IAAI;AAClB,UAAM,IAAI,MAAM,mCAAmC;AAAA,EACvD;AACA,OAAK,CAAC,IAAK,KAAK,CAAC,IAAI,KAAQ;AAC7B,OAAK,CAAC,IAAK,KAAK,CAAC,IAAI,KAAQ;AAC7B,MAAI,KAAK;AACL,aAAS,UAAU;AACnB,QAAI,SAAS,KAAK,SAAS,KAAK,IAAI,QAAQ;AACxC,YAAM,IAAI,WAAW,mBAAmB,MAAM,IAAI,SAAS,EAAE,0BAA0B;AAAA,IAC3F;AACA,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACzB,UAAI,SAAS,CAAC,IAAI,KAAK,CAAC;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AACA,SAAO,gBAAgB,IAAI;AAC/B;AACA,IAAO,aAAQ;;;AJZf,IAAM,UAAmB,OAAO,UAAU;AAExC,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,OAAO,KAAK,MAAM,MAAM,QAAQ,IAAI;AAC1C,UAAM,EAAE,WAAW,OAAO,QAAQ,IAAI;AAGtC,QAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS;AACpC,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,0BAA0B,CAAC;AAAA,MAC3D;AAAA,IACF;AAGA,UAAM,aAAa;AACnB,QAAI,CAAC,WAAW,KAAK,KAAK,GAAG;AAC3B,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,uBAAuB,CAAC;AAAA,MACxD;AAAA,IACF;AAGA,UAAM,cAAwB;AAAA,MAC5B,IAAI,WAAO;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAY,oBAAI,KAAK,GAAE,YAAY;AAAA,IACrC;AAGA,UAAM,UAAU,YAAAC,QAAK,KAAK,UAAAC,QAAG,QAAQ,GAAG,eAAe;AACvD,QAAI,CAAC,UAAAC,QAAG,WAAW,OAAO,GAAG;AAC3B,gBAAAA,QAAG,UAAU,SAAS,EAAE,WAAW,KAAK,CAAC;AAAA,IAC3C;AAGA,UAAM,eAAe,YAAAF,QAAK,KAAK,SAAS,gBAAgB;AACxD,QAAI,YAAwB,CAAC;AAC7B,QAAI,UAAAE,QAAG,WAAW,YAAY,GAAG;AAC/B,YAAM,OAAO,UAAAA,QAAG,aAAa,cAAc,MAAM;AACjD,kBAAY,KAAK,MAAM,IAAI;AAAA,IAC7B;AAGA,cAAU,KAAK,WAAW;AAG1B,cAAAA,QAAG,cAAc,cAAc,KAAK,UAAU,WAAW,MAAM,CAAC,CAAC;AAEjE,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,WAAW;AAAA,IAClC;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,sCAAsC,KAAK;AACzD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,4BAA4B,CAAC;AAAA,IAC7D;AAAA,EACF;AACF;",
  "names": ["import_crypto", "path", "os", "fs"]
}
