{
  "version": 3,
  "sources": ["../../../../Pictures/new/project/netlify/functions/feedback.ts"],
  "sourceRoot": "C:/Users/Prateek/AppData/Local/Temp/tmp-27296-x1lMf4sSYsLS",
  "sourcesContent": ["import { Handler } from '@netlify/functions';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport os from 'os';\n\ninterface Feedback {\n  id: number;\n  full_name: string;\n  email: string;\n  message: string;\n  created_at: string;\n}\n\n// Use a permanent file path outside the project directory\n// This ensures the data persists between server restarts\nconst DATA_DIR = path.join(os.homedir(), 'feedback-data');\nconst FEEDBACK_FILE = path.join(DATA_DIR, 'feedbacks.json');\n\nconst ensureDataFile = async () => {\n  try {\n    await fs.mkdir(DATA_DIR, { recursive: true });\n    try {\n      await fs.access(FEEDBACK_FILE);\n    } catch {\n      // Write with proper formatting\n      await fs.writeFile(FEEDBACK_FILE, JSON.stringify([], null, 2), 'utf8');\n    }\n  } catch (error) {\n    console.error('Error ensuring data file exists:', error);\n    throw new Error('Failed to initialize storage');\n  }\n};\n\n// Read feedbacks from file with error handling\nconst readFeedbacks = async (): Promise<Feedback[]> => {\n  try {\n    const data = await fs.readFile(FEEDBACK_FILE, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading feedbacks file:', error);\n    // If there's an error reading the file, reset it\n    await fs.writeFile(FEEDBACK_FILE, JSON.stringify([], null, 2), 'utf8');\n    return [];\n  }\n};\n\n// Write feedbacks to file with error handling\nconst writeFeedbacks = async (feedbacks: Feedback[]): Promise<void> => {\n  try {\n    await fs.writeFile(FEEDBACK_FILE, JSON.stringify(feedbacks, null, 2), 'utf8');\n    console.log(`Data saved to ${FEEDBACK_FILE}`);\n  } catch (error) {\n    console.error('Error writing feedbacks file:', error);\n    throw new Error('Failed to save feedback');\n  }\n};\n\nconst handler: Handler = async (event) => {\n  // Set CORS headers for all responses\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Content-Type': 'application/json',\n  };\n\n  // Handle preflight requests\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers,\n      body: '',\n    };\n  }\n\n  try {\n    await ensureDataFile();\n\n    if (event.httpMethod === 'GET') {\n      const feedbacks = await readFeedbacks();\n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(feedbacks),\n      };\n    }\n\n    if (event.httpMethod === 'POST' && event.body) {\n      const { full_name, email, message } = JSON.parse(event.body);\n      \n      if (!full_name || !email || !message) {\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ \n            error: 'Missing required fields',\n            details: {\n              full_name: !full_name ? 'Full name is required' : null,\n              email: !email ? 'Email is required' : null,\n              message: !message ? 'Message is required' : null\n            }\n          }),\n        };\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ error: 'Invalid email format' }),\n        };\n      }\n\n      const feedbacks = await readFeedbacks();\n\n      const newFeedback: Feedback = {\n        id: Date.now(),\n        full_name,\n        email,\n        message,\n        created_at: new Date().toISOString(),\n      };\n\n      feedbacks.push(newFeedback);\n      await writeFeedbacks(feedbacks);\n\n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(newFeedback),\n      };\n    }\n\n    return {\n      statusCode: 405,\n      headers,\n      body: JSON.stringify({ error: 'Method not allowed' }),\n    };\n  } catch (error) {\n    console.error('Error:', error);\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ \n        error: 'Internal server error',\n        message: error instanceof Error ? error.message : 'An unexpected error occurred'\n      }),\n    };\n  }\n};\n\nexport { handler };"],
  "mappings": "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",
  "names": ["path", "os", "fs"]
}
